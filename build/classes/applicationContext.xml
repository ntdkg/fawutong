<?xml version="1.0" encoding="UTF-8"?>
<beans  xmlns="http://www.springframework.org/schema/beans" 
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
		xmlns:context="http://www.springframework.org/schema/context"
		xmlns:tx="http://www.springframework.org/schema/tx"   
		xmlns:util="http://www.springframework.org/schema/util" 
		xmlns:aop="http://www.springframework.org/schema/aop"  
		xmlns:mvc="http://www.springframework.org/schema/mvc"        
    	xsi:schemaLocation="http://www.springframework.org/schema/beans        
    						http://www.springframework.org/schema/beans/spring-beans.xsd        
    						http://www.springframework.org/schema/context        
   							http://www.springframework.org/schema/context/spring-context.xsd
   							http://www.springframework.org/schema/tx    
          					http://www.springframework.org/schema/tx/spring-tx-4.0.xsd 
     						http://www.springframework.org/schema/aop 
     						http://www.springframework.org/schema/aop/spring-aop-4.0.xsd 
   							http://www.springframework.org/schema/mvc  
						    http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">
		
		<!-- 默认的注解映射的支持 -->  
		<context:annotation-config />
		<!-- 自动扫描controller包下的所有类，讲带有@Service @ Reporsitory @companent @concroler 自动注入到bean里面 -->
		<context:component-scan base-package="cn.edu.neusoft.*" /> 
    	
    	<!-- 针对 Responsebody 转码 -->
    	<mvc:annotation-driven>
			<mvc:message-converters register-defaults="true">
				<bean class="cn.edu.neusoft.fawutong.util.UTF8StringHttpMessageConverter" />
			</mvc:message-converters>
		</mvc:annotation-driven>  
		
	    <!-- 1. 数据源 : DriverManagerDataSource -->
	    <!-- alibaba druid 数据库连接池 -->
	    <!-- 更改为postgre -->
	    <bean class="com.alibaba.druid.pool.DruidDataSource" id="dataSource" destroy-method="close">
		<!-- 数据库基本信息配置 -->
		<property value="jdbc:postgresql://120.24.157.27:5432/Phalapi_text?characterEncoding=utf8" name="url"/>
		<property value="postgres" name="username"/>
		<property value="zzh940710" name="password"/>
		<property value="org.postgresql.Driver" name="driverClassName"/>
		<property value="stat" name="filters"/>
		<!-- 最大并发连接数 -->
		<property value="20" name="maxActive"/>
		<!-- 初始化连接数量 -->
		<property value="1" name="initialSize"/>
		<!-- 配置获取连接等待超时的时间 -->
		<property value="60000" name="maxWait"/>
		<!-- 最小空闲连接数 -->
		<property value="10" name="minIdle"/>
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property value="60000" name="timeBetweenEvictionRunsMillis"/>
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property value="300000" name="minEvictableIdleTimeMillis"/>
		<property value="SELECT 'x'" name="validationQuery"/>
		<property value="true" name="testWhileIdle"/>
		<property value="false" name="testOnBorrow"/>
		<property value="false" name="testOnReturn"/>
		<property value="20" name="maxOpenPreparedStatements"/>
		<!-- 打开removeAbandoned功能 -->
		<property value="true" name="removeAbandoned"/>
		<!-- 1800秒，也就是30分钟 -->
		<property value="1800" name="removeAbandonedTimeout"/>
		<!-- 关闭abanded连接时输出错误日志 -->
		<property value="true" name="logAbandoned"/>
		</bean>
	    
	    <!-- mybatis文件配置，扫描所有mapper*xml.文件 -->
	    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
		<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
			<property name="configLocation" value="classpath:config/mybatis-config.xml" />  
		    <property name="dataSource" ref="dataSource" />
		    <!-- 自动扫描mapping.xml文件，**表示迭代查找 -->
		    <property name="mapperLocations" value="classpath*:cn/edu/neusoft/**/*Mapper.xml"/>
		 	
		</bean>
		
		<!-- mybatis spring sqlSessionTemplate,使用时直接让spring注入即可 -->
		<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate"> 
		  <constructor-arg index="0" ref="sqlSessionFactory" />  
		</bean>
		
		<!-- spring与mybatis整合配置，扫描所有mapper -->
		<!-- 
		DAO接口所在包名，Spring会自动查找其下的类 ,包下的类需要使用@MapperScan注解,否则容器注入会失败 
		因为使用simpleTemplate，使用时直接让spring注入即可
		-->
		<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
			<property name="basePackage" value="cn.edu.neusoft.*.mapper" />
			<property name="sqlSessionFactory" ref="sqlSessionFactory"></property>
		</bean>
		
		<!-- 对数据源进行事务管理 -->
		<bean id="transactionManager"
			class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
			<property name="dataSource" ref="dataSource" />
		</bean>
		
	    <!--   
	        制定哪些方法需要开启事物(是事物管理)   
	        name="需要执行事物管理器的方法名"  
	        propagetion:必须的  
	        rollback-for：定义出现什么异常之后rollback  
	     -->  
	     <!-- 配置哪些方法要加入事务控制 -->
		<tx:advice id="txAdvice" transaction-manager="transactionManager">
			<tx:attributes>
				<!-- 以下方法都是可能设计修改的方法，就无法设置为只读 -->	
				<tx:method name="do*" propagation="REQUIRED" />
				<tx:method name="del*" propagation="REQUIRED" rollback-for="Exception" />
				<tx:method name="merge*" propagation="REQUIRED" />
				<tx:method name="add*" propagation="REQUIRED" rollback-for="Exception"/>
				<tx:method name="update*" propagation="REQUIRED" rollback-for="Exception" />
				<tx:method name="enable*" propagation="REQUIRED" />
				<tx:method name="sync*" propagation="REQUIRED" />
				<tx:method name="get*" propagation="REQUIRED" />
				<tx:method name="select*" propagation="REQUIRED" rollback-for="Exception" />
				<!--其他方法只读  -->  
				<!-- 让所有的方法都加入事务管理，为了提高效率，可以把一些查询之类的方法设置为只读的事务 -->
				<tx:method name="*" read-only="true"/> 
			</tx:attributes>
		</tx:advice>
		
		<!-- 
		关联事务管理器和执行的类(添加横切面) 
		 -->
		<!-- 配置AOP，Spring是通过AOP来进行事务管理的 -->
		<aop:config >
			<!-- 设置pointCut表示哪些方法要加入事务处理 -->
			<!-- 以下的事务是声明在DAO中，但是通常都会在Service来处理多个业务对象逻辑的关系，注入删除，更新等，
			此时如果在执行了一个步骤之后抛出异常 就会导致数据不完整，所以事务不应该在DAO层处理，
			而应该在service，这也就是Spring所提供的一个非常方便的工具，声明式事务 -->
			<aop:pointcut expression="execution (* cn.edu.neusoft.*.service.*.*(..))" id="services" />
			<!--  将事物管理器和横切面关联 -->
			<!-- 通过advisor来确定具体要加入事务控制的方法 -->
			<aop:advisor advice-ref="txAdvice" pointcut-ref="services" />
		</aop:config>
	    
	    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver" />
	   
	    <!-- 拦截器配置 -->
	    <mvc:interceptors>
			<mvc:interceptor>   
			    <mvc:mapping path="/fawutongadmin/*.html"/> <!-- 管理员登录拦截 -->   
			    <mvc:exclude-mapping path="/fawutongadmin/index.html"/>
			    <mvc:exclude-mapping path="/fawutongadmin/login.html"/>
			    <bean class="cn.edu.neusoft.fawutong.interceptor.AdminUserLoginInterceptor"></bean>   
			</mvc:interceptor>
			
			<mvc:interceptor>   
			    <mvc:mapping path="/fawutong/pages/user/*.html"/> <!-- 用户个人中心拦截器 -->   
			    <mvc:mapping path="/fawutong/pages/delegation/*.html"/>
			    <mvc:exclude-mapping path="/fawutong/pages/delegation/writ.html"/>
			    <mvc:exclude-mapping path="/fawutong/pages/delegation/delegate.html"/>
			    <bean class="cn.edu.neusoft.fawutong.interceptor.UserLoginInterceptor"></bean>   
			</mvc:interceptor>
			
			<mvc:interceptor>   
			    <mvc:mapping path="/fawutong/pages/lawyer/delegations.html"/>
			    <mvc:mapping path="/fawutong/pages/lawyer/doDelegate.html"/>
			    <bean class="cn.edu.neusoft.fawutong.interceptor.LawyerUserLoginInterceptor"></bean>   
			</mvc:interceptor>
		</mvc:interceptors>
		
        
        
</beans>

